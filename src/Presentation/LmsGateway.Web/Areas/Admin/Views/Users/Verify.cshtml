@model List<User>

@{ 

}

@section scripts{
    <script>
        $(document).ready(function () {
            BindCheckBoxes();

            $("#btnVerified").click(function () {
                try {
                    $.ajax({
                        type: "POST",
                        //dataType: "json",
                        url: "@Url.Action("Verify", "Users", new { area = "Admin"})",
                        data: $("#frmVerifyUser").serialize(),
                        beforeSend: function () {
                            //$("#processing").show();
                        },
                        complete: function () {
                            //$("#processing").hide();
                        },

                        success: SuccessFunc,
                        error: ErrorFunc,
                    });

                    function SuccessFunc(data) {
                        $("#divTable").html(data);

                        BindCheckBoxes();
                        
                        //if (data.message.indexOf("Error Occurred") <= -1) {
                        //    $('#btnRegisterCourse').prop('disabled', true);
                        //    $("#selectAllFirstSemester").prop('disabled', true);
                        //    $("#selectAllSecondSemester").prop('disabled', true);
                        //    $(".ckb1").prop('disabled', true);
                        //    $(".ckb2").prop('disabled', true);

                        //    $('#divCourseFormPrintOut').show();
                        //}

                        alert("Verified!");
                    }

                    function ErrorFunc() {
                        alert("Operation failed!");
                    }
                } catch (e) {
                    alert(e);
                }
            });

        })

        function BindCheckBoxes() {
            try {
                BindSelectAll($("#checkAll"), $(".ckb"));
                BindSelectOne($("#checkAll"), $(".ckb"));

                UpdateSelectAllCheckBox($("#selectAll"), $(".ckb"));

            } catch (e) {
                alert(e);
            }
        }

        function BindSelectAll(chkBox, chkBoxClass) {
            chkBox.click(function (event) {

                try {
                    if (this.checked) {
                        chkBoxClass.each(function () {
                            this.checked = true;
                        });
                    } else {
                        chkBoxClass.each(function () {
                            this.checked = false;
                        });
                    }
                    //var carryOverUnit = CalculateSelectedCourseUnit($(".ckb6"));
                    //var totalUnit = CalculateSelectedCourseUnit(chkBoxClass) + parseInt(carryOverUnit);
                    //courseUnitLabel.html(totalUnit);

                    //UpdateButtonState();
                } catch (e) {
                    alert(e);
                }
            });
        }

        function BindSelectOne(chkBox, chkBoxClass) {
            chkBoxClass.click(function (event) {

                try {

                    var totalSelected = chkBoxClass.filter(":checked").length;
                    var totalCheckBoxCount = chkBoxClass.length;

                    if (!this.checked) {
                        chkBox.prop('checked', false);
                    } else {
                        if (totalSelected == totalCheckBoxCount) {
                            chkBox.prop('checked', true);
                        }
                       
                    }

                    //var totalUnit = 0;
                    //var currentUnit = CalculateSelectedCourseUnit(chkBoxClass);
                    //totalUnit = currentUnit;
                    //courseUnitLabel.html(totalUnit);

                    //UpdateButtonState();

                } catch (e) {
                    alert(e);
                }
            });
        }

        function UpdateSelectAllCheckBox(chkBox, chkBoxClass) {
            try {
                var totalSelected = chkBoxClass.filter(":checked").length;
                var totalCheckBoxCount = chkBoxClass.length;

                if (totalSelected == totalCheckBoxCount) {
                    chkBox.prop('checked', true);
                }
            } catch (e) {
                alert(e);
            }
        }
    </script>
}

<div class="page ">
    <div class="container page__container">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-action="Index" asp-controller="Dashboard" asp-area="Admin">Admin</a></li>
            <li class="breadcrumb-item"><a asp-action="Index" asp-controller="Users" asp-area="Admin" >Users</a></li>
            <li class="breadcrumb-item active">Verify</li>
        </ol>

        <div class="d-flex flex-column flex-sm-row flex-wrap mb-headings align-items-start align-items-sm-center">
            <div class="flex mb-2 mb-sm-0">
                <h1 class="h2">Verify User</h1>
            </div>
            <button id="btnVerified" class="btn btn-success">Verified</button>
        </div>

        <div class="card">
            <div class="card-body">
                <div class="row">
                    @*<div class="col-lg-4">
                            <h4 class="card-title">Toggle Checkboxes</h4>
                            <p>A tiny plugin which adds the ability to toggle all checkboxes within a table.</p>
                        </div>*@

                    <div class="col-lg-12">
                        @*<div class="table-responsive border-bottom" data-toggle="lists" data-lists-values='["js-lists-values-employee-name"]'>*@

                        <div class="table-responsive border-bottom" data-toggle="lists">
                            <div id="divTable">
                                @await Html.PartialAsync("_verify/_unverifiedUsers", Model)
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>